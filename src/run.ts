/* eslint-disable @typescript-eslint/no-unused-vars */
import * as core from '@actions/core';
import { writeFileSync } from 'fs';
import fetch from 'node-fetch';

interface Input {
  token: string;
  phone_email_or_username: string;
  client_id: string;
  password: string;
}

export function getInputs(): Input {
  const result = {} as Input;
  result.phone_email_or_username = core.getInput('phone_email_or_username') || process.env.email || '';
  result.password = core.getInput('password') || process.env.password || '';
  result.client_id = '1';
  return result;
}

// Generated by https://quicktype.io

export interface Access {
  access_token:  string;
  expires_in:    number;
  token_type:    string;
  user:          User;
  balance:       number;
  refresh_token: string;
}

export interface User {
  username:            string;
  last_name:           string;
  friends_count:       number;
  is_group:            boolean;
  is_active:           boolean;
  trust_request:       null;
  is_venmo_team:       boolean;
  phone:               string;
  profile_picture_url: string;
  is_payable:          boolean;
  is_blocked:          boolean;
  id:                  string;
  identity:            null;
  date_joined:         string;
  about:               string;
  display_name:        string;
  identity_type:       string;
  audience:            string;
  first_name:          string;
  friend_status:       null;
  email:               string;
}


const run = async (): Promise<void> => {
  const base = 'https://api.venmo.com/v1';
  const input = getInputs();

  const accessBody = {
    phone_email_or_username: input.phone_email_or_username,
    client_id: input.client_id,
    password: input.password
  };
  const ans = await fetch(`${base}/oauth/access_token`, {
    method: 'POST',
    body: JSON.stringify(accessBody),
    headers: {
      'device-id': '88884260-05O3-8U81-58I1-2WA76F357GR9',
      'Content-Type': 'application/json'
    }
  });

  const access: Access = await ans.json();
  process.env.access_token = access.access_token;
  console.log(access);

  const request = async (method, path, body?): Promise<any> => {
    console.log('->', path, body);
    const response = await fetch(`${base}/${path}`, {
      method: method,
      body: JSON.stringify(body),
      headers: {
        'Authorization': `Bearer ${access?.access_token}`,
        'Content-Type': 'application/json'
      }
    });
    console.log('<-', response);
    return response.json();
  }

  const user = 'goosetoe';
  const searchResponse = await request('GET', `users?query=${user}&limit=50&offset=0`);
  console.log(searchResponse);

  writeFileSync('friends.json', JSON.stringify(searchResponse, null, 2));
  const goose = searchResponse.data.find(friend => friend.username === 'goosetoe');
  console.log(goose);

  // await request('POST', `payments`, {
  //   user_id: 4696228937479104362,
  //   audience: "private",
  //   amount: '1.23',
  //   note: "The transaction note."
  // });
};

export default run;
